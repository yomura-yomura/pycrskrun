import numpy as np
import niche_lib


def niche_to_crsk(x, y):
    return y, -x


def get_array():
    array = niche_lib.niche_detector_array.load_location_data(with_hole_radius=True, origin="center of array", unit="cm")
    array.position.x, array.position.y = niche_to_crsk(array.position.x, array.position.y)
    return array


class telescope:
    version = "1.0"

    def __init__(self, x_core=0, y_core=0, use_niche_coordinate=True, print_obslevel_command=True, decimals=4):
        self.decimals = decimals

        x_tel_offset = -x_core
        y_tel_offset = -y_core

        if use_niche_coordinate:
            x_tel_offset, y_tel_offset = niche_to_crsk(x_tel_offset, y_tel_offset)

        self.header = "* generated by {} (v{})".format("lib_niche_array_for_crsk.telescope", telescope.version)
        if x_core != 0 or y_core != 0:
            self.header += "\n* x-core = {} and y-core = {} ({} coordinate)".format(
                x_core, y_core, 
                "NICHE" if use_niche_coordinate else "CORSIKA"
                )

        self.array = get_array()
        obslevel = (self.array.position.z - self.array.r).min()

        self.array.position.x += x_tel_offset
        self.array.position.y += y_tel_offset
        self.array.position.z -= obslevel

        if print_obslevel_command:
            self.obslevel_command = "OBSLEV     {}".format(obslevel.round(decimals))
        else:
            self.obslevel_command = None

    def __len__(self):
        return self.array.shape[0]

    def __getitem__(self, i):
        return "TELESCOPE  {:>{maxlen1}}  {:>{maxlen2}}  {:>{maxlen3}}  {:.1f}   {}".format(
            self.array[i].position.x.round(self.decimals),
            self.array[i].position.y.round(self.decimals),
            self.array[i].position.z.round(self.decimals),
            self.array[i].r,
            self.array[i].name,
            maxlen1=np.char.str_len(self.array.position.x.round(self.decimals).astype(str)).max(),
            maxlen2=np.char.str_len(self.array.position.y.round(self.decimals).astype(str)).max(),
            maxlen3=np.char.str_len(self.array.position.z.round(self.decimals).astype(str)).max()
        )

    def __iter__(self):
        for i in range(self.__len__()):
            yield self.__getitem__(i)

    def __str__(self):
        return (
            self.header + "\n" +
            (self.obslevel_command+"\n" if self.obslevel_command is not None else "") +
            "\n".join(self)
            )
                    
    def __repr__(self):
        return self.__str__()

